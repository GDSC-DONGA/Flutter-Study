출력방법
```dart
void main() {
    print('Hello World!');
}
```
```
Hello World!
```
변수(variable) 설정과 값 변경(같은 이름의 변수 선언은 한번만)
```dart
void main() {
    var name = 'JIINNNHY';
    print(name);
    var name2 = 'JIINNN';
    print(name2);
    name = 'JIN'; (가능)
    print(name);
    var name = 'JIN'; (불가능)
    print(name);
}
```
```
JIINNNHY
JIINNN
JIN
Error
```
정수(integer)
```dart
void main() {
	int number1 = 3;
    print(number1);
    int number2 = 7;
    print(number2);
    print(number1 + number2);
    print(number1 - number2);
    print(number1 / number2);
    print(number * number2);
}
```
```
3
7
10
-4
0.42857142857142855
21
```
실수(double)
```dart
void main() {
	double number1 = 3.5;
    double number2 = 7.5;
    print(number1 + number2);
    print(number1 - number2);
    print(number1 / number2);
    print(number1 * number2);
}
```
```
11
-4
0.4666666666666667
26.25
```
참/거짓(Boolean)
```dart
void main() {
	bool isTrue = true;
    bool isFalse = false;
    print(isTrue);
    print(isFalse);
}
```
```
true
false
```
글자 타입(String)
```dart
void main() {
	String name1 = 'JIINNN';
    String name2 = 'HY';
    print(name1);
    print(name2);
    print(name1 + name2);
    print(name1 + ' ' + name2);
    print('${name1} ${name2}');
    print('$name1 $name2');
}
```
```
JIINNN
HY
JIINNNHY
JIINNN HY
JIINNN HY
JIINNN HY
```
변수 타입 유추(var이라는 변수는 존재하지 않음)
```dart
void main() {
	var name = 'JIINNN';
    var number = 37;
    print(name.runtimeType);
    print(number.runtimeType);
}
```
```
String
int
```
```dart
void main() {
	String name1 = 'JIINNN';
    String name2 = 'HY';
    print('${name1.runtimeType} ${name2}'); (O)
    print('$name1.runtimeType $name2'); (X)
}
```
```
String HY
JIINNN.runtimeType HY (괄호가 없으면 글자로 인식)
```
dynamic
: Var은 첫 지정 변수의 타입 고정 / dynamic은 자유롭게 변함
```dart
void main() {
	dynamic name1 = 'JIINNN';
    var name2 = 'HY';
    dynamic number1 = 3;
    var number2 = 7;
    print(name1);
    print(name2);
    print(number1);
    print(number2);
    print(name1.runtimeType);
    print(name2.runtimeType);
    print(number1.runtimeType);
    print(number2.runtimeType);
    name1 = 5; (O)
    name2 = 9; (X)
    number1 = 'JIN'; (O)
    number2 = 'HHYY'; (O)
    print(name1.runtimeType);
    print(name2.runtimeType);
    print(number1.runtimeType);
    print(number2.runtimeType);
}
```
```
JIINNN
HY
3
7
String
String
int
int
int
Error
String
Error
```
nullable : null이 될 수 있다.
non-nullable : null이 될 수 없다.
null : 아무런 값도 있지 않다.
```dart
void main() {
	String name1 = 'JIINNN';
    name1 = null; (X)
    print(name1); 
    String? name2 = 'HY';
    name2 = null; (O)
    print(name2);
    String? name3 = 'JIN';
    print(name3!);
}
```
```
Error (non-nillable)
null (nullable, ?를 붙여 될 수 있게 함)
JIN (!를 사용해 현재 이 값은 null이 아님을 의미)
```
final & const : 첫 지정 변수의 값을 변경할 수 없게 만듬 & var 생략 가능(var기능까지 해줌)
```dart
void main() {
	final String name1 = 'JIINNN';
    print(name1);
    name1 = 'JIN'; (X)
    const String name2 = 'HY';
    print(name2);
    name2 = 'HHYY'; (X)
    final name3 = 'JIINNNHY';
    const name4 = 'JINHY';
    print(name3);
    print(name4);
}
```
```
JIINNN
HY
JIINNNHY
JINHY
```
DateTime
```dart
void main() {
	DateTime now = DateTime.now();
    print(now);
}
```
```
2022-10-30 00:19:26.558(코드가 실행되는 시간을 변수로 지정하여 출력)
```
final & const 차이점
```dart
void main() {
	final DateTime now1 = DateTime.now(); (O)
	const DateTime now2 = DateTime.now(); (X)
}
```
```
final : 빌드타임의 값을 몰라도 된다.
const : 빌드타임의 값을 알고 있어야 한다.(절대적)
빌드타임 : 빌드 실행 시 코드가 기계어로 변경되는 것
DateTime.now는 코드가 실행이 되는 순간의 값을 가져오는 것이기 때문에 const는 빌드가 될 때 값을 알 수 없다.
```
연산자(operator)
```dart
void main() {
	double number1 = 3.0;
    print(number1);
    print(number1 % 2);
    print(number1);
    number1 ++;
    print(number1);
    number1 --;
    print(number1);
    number1 += 2;
    print(number1);
    number1 -= 2;
    print(number1);
    number1 *= 2;
    print(number1);
    number1 /= 2;
    print(number1);
}
```
```
3
1 (나머지값)
3
4 (+1 후위증가연산)
3 (-1 후위감소연산)
5 (대입연산자↓)
3
6
3
```
연산자(operator) // null
```dart
void main() {
	double? number1 = 7.0;
    print(number1);
    number1 = 3.0;
    print(number1);
    number1 = null;
    print(number1);
    number1 ??= 5.0;
    print(number1);
}
```
```
7
3
null
5 (??값이 null일 경우 값을 변경, null이 아닐 경우 변경되지 않음)
```
비교 연산자(Comparison operator)
```dart
void main() {
	int number1 = 3;
    int number2 = 7;
    print(number1 < number2);
    print(number1 > number2);
    print(number1 >= number2);
    print(number1 <= number2);
    print(number1 == number2);
    print(number1 != number2);
}
```
```
true
false
false
true
false
true
```
연산자(operator) // Type
```dart
void main() {
	int number1 = 3;
    print(number1 is int);
    print(number1 is String);
    print(number1 is! int);
    print(number1 is! String);
}
```
```
true
false
false
true
```
논리 연산자(Logical operator)
&& : and 조건
|| : or 조건
```dart
void main() {
	bool result1 = 12 > 10 && 1 > 0;
    print(result1);
	bool result2 = 12 > 10 && 0 > 1;
    print(result2);
    
    bool result3 = 12 > 10 || 1 > 0;
    print(result3);
	bool result4 = 12 > 10 || 0 > 1;
    print(result4);
    bool result5 = 12 < 10 || 0 > 1;
    print(result5);
}
```
```
true
false

true
true
false
```
List(중복값 가능)
```dart
void main() {
	List<String> cola = ['coke', 'pepsi', 'drPeper'];
    List<int> numbers = [3, 5, 7, 9];
    print(cola);
    print(numbers);
    print(cola[0]);
    print(cola[1]);
    print(cola[2]);
    print(cola.length);
    cola.add('815');
    print(cola);
    cola.remove('815');
    print(cola);
    print(cola.indexOf('drPeper'));
}
```
```
[coke, pepsi, drPeper]
[3, 5, 7, 9]
coke
pepsi
drPeper
3
[coke, pepsi, drPeper, 815]
[coke, pepsi, drPeper]
2
```
Map<키의 타입, 값의 타입>
```dart
void main() {
	Map<String, String> dictionary = {
    	'cocaCola' : '코카콜라',
        'drPeper' : '닥터페퍼',
    };
    print(dictionary);
    
    Map<String, bool> isCocaCola ={
    	'cocaCola' : true,
        'drPeper' : false,
    };
    print(isCocaCola);
    isCocaCola.addAll({
    	'pepsi' : false,
    });
    print(isCocaCola);
    print(isCocaCola['drPeper']);
    
    isCocaCola['815'] = false;
    print(isCocaCola);
    isCocaCola['drPeper'] = true;
    print(isCocaCola);
    
    isCocaCola.remove('815');
    print(isCocaCola);
    
    print(isCocaCola.keys);
    print(isCocaCola.values);
}
```
```
{cocaCola: 코카콜라, drPeper: 닥터페퍼}

{cocaCola: true, drPeper: false}
{cocaCola: true, drPeper: false, pepsi: false}
false (키의 값을 찾음)

{cocaCola: true, drPeper: false, pepsi: false, 815: false}
{cocaCola: true, drPeper: true, pepsi: false, 815: false}

{cocaCola: true, drPeper: true, pepsi: false}

(cocaCola, drPeper, pepsi)
(true, true, false)
```
Set(중복값 불가 : 알아서 중복값 제거)
```dart
void main() {
	final Set<String> names = {
    	'dart',
        'flutter',
        'code',
        'flutter',
    };
    print(names);
    names.add('velog');
    print(names);
    names.remove('velog');
    print(names);
    print(names.contains('flutter'));
}
```
```
{dart, flutter, code}
{dart, flutter, code, velog}
{dart, flutter, code}
true (값이 세트에 존재하는지 확인)
```
if
```dart
void main() {
	int number = 5;
    if(number % 3 == 0) {
    	print('나머지가 0입니다.');
    } else if(number % 3 == 1) {
    	print('나머지가 1입니다.');
    } else {
    	print('나머지가 2입니다.');
    }
}
```
```
나머지가 2입니다.
if문에서 조건이 맞지 않을 경우 else if문으로
else if도 맞지 않을 경우 else
if문에서 맞을 경우 else if 와 else는 실행되지 않는다.
```
switch
```dart
 void main() {
	int number = 5;
    switch(number % 3) {
        case 0:
      		print('나머지가 0입니다.');
      		break;
        case 1:
        	print('나머지가 1입니다.');
            break;
        default:
        	print('나머지가 2입니다.');
            break;
    }
}
```
```
나머지가 2입니다.
if문과 같다
defailt 가 else 역할
```
loof
```dart
void main() {
	for(int i = 0; i < 10; i++) //변수; 실행조건; 실행요소
    	print(i);
    int total = 0;
}

void main() {
    int total = 0;
    List<int> numbers = [1, 2, 3, 4, 5, 6, 7];
    for(int i = 0; i< numbers.length; i++){
    	total += numbers[i];
    }
    print(total);
    total = 0;
    for(int number in numbers) {
    	total += number;
    }
    print(total);
}
```
```
0
1
2
3
4
5
6
7
8
9

28
28
```
while loop
```dart
void main() {
	int total = 0;
    while(total <10) {
    	total +=1;
    }
    print(total);
    total = 0;
    do {
    	total += 1;
    } while(total <10);
    print(total);
}
```
```
10(조건을 확인 후 계신을 실행)
10(계산을 실행 후 조건을 확인)
```
break
```dart
void main() {
	int total = 0;
    while(total < 10){
    	total += 1;
    	if(total == 5){
    		break;
        }
    }
    print(total);
    total = 0;
    for(int i = 0; i < 10; i++){
    	total += 1;
        if(total == 5){
        	break;
        }
    }
    print(total);
}
```
```
5
5
break를 통해 if조건이 충족되었을 때 loof 탈출
```
continue
```dart
void main() {
    for(int i = 0; i < 10; i++){
        if(i == 5){
        	continue;
        }
        print(i);
    }
}
```
```
0
1
2
3
4
현재 실행하고 있는 loof만 취소
6
7
8
9
```
enum
```dart
enum Status{
	approved,
    pending,
    rejected,
}
void main() {
	Status status = Status.rejected;
    if(status == Status.approved){
    	print('승인입니다.');
    } else if(status == Status.pending){
    	print('대기입니다.');
    } else{
    	print('거절입니다.');
    }
}
```
```
거절입니다.
정확히 존재하는 값만 확인하고 오타를 방지하기 위해 enum 사용
```
함수
```dart
void main() {
	addNumbers();
}
// 세개의 숫자 (x, y, z)를 더하고 짝수인지 홀수인지 알려주는 함수
addNumbers(){
	int x = 10;
    int y = 20;
    int z = 30;
    int sum = x + y + z;
    print('x : $x');
    print('y : $y');
    print('z : $z');
    if(sum % 2 == 0){
    	print('짝수입니다.');
    } else {
    	print('홀수입니다.');
    }
}
```
```
x : 10
y : 20
z : 30
짝수입니다.
```
매개변수(parameter / argument)
\- 순서가 중요한 매개변수(positional parameter)
```dart
void main() {
	addNumbers(10, 20, 30);
    addNumbers(20, 30, 40);
}
// 세개의 숫자 (x, y, z)를 더하고 짝수인지 홀수인지 알려주는 함수
addNumbers(int x, int y, int z){
    int sum = x + y + z;
    print('x : $x');
    print('y : $y');
    print('z : $z');
    if(sum % 2 == 0){
    	print('짝수입니다.');
    } else {
    	print('홀수입니다.');
    }
}
```
```
x : 10
y : 20
z : 30
짝수입니다.
x : 20
y : 30
z : 40
짝수입니다.
중복해서 사용하는 함수를 다시 재활용 가능
```
\- 선택적 매개변수(optional parameter)
```dart
void main() {
	addNumbers(10);
    addNumbers(20, 40, 60);
}
// 세개의 숫자 (x, y, z)를 더하고 짝수인지 홀수인지 알려주는 함수
addNumbers(int x, [int y = 20, int z = 30]){
    int sum = x + y + z;
    print('x : $x');
    print('y : $y');
    print('z : $z');
    if(sum % 2 == 0){
    	print('짝수입니다.');
    } else {
    	print('홀수입니다.');
    }
}
```
```
y값과 z값을 미기입 시 미리 지정된 값으로 지정
x : 10
y : 20
z : 30
짝수입니다.
y값과 z값을 기입 시 기입한 값으로 지정
x : 20
y : 40
z : 60
짝수입니다.
```
\- 이름이 있는 매개변수(named parameter)
```dart
void main() {
	addNumbers(x: 10, y: 20);
    addNumbers(y: 10, x: 30, z: 50); // 이름을 지정하기에 순서가 상관이 없다.
}
// 세개의 숫자 (x, y, z)를 더하고 짝수인지 홀수인지 알려주는 함수
addNumbers({
	required int x,
    required int y,
    int z = 70, // 선택적 매개변수 응용가능
}) {
    int sum = x + y + z;
    print('x : $x');
    print('y : $y');
    print('z : $z');
    if(sum % 2 == 0){
    	print('짝수입니다.');
    } else {
    	print('홀수입니다.');
    }
}
```
```
x : 10
y : 20
z : 70
짝수입니다.
x : 30
y : 10
z : 50
짝수입니다.
```
void
```dart
void main() {
	int result1 = addNumbers(x: 10, y: 20);
    int result2 = addNumbers(y: 10, x: 30, z: 50);
    print('result1 : $result1');
    print('result2 : $result2');
    print('sum : ${result1 + result2}');
}
// 세개의 숫자 (x, y, z)를 더하고 짝수인지 홀수인지 알려주는 함수
int addNumbers({
	required int x,
    required int y,
    int z = 70,
}) {
    int sum = x + y + z;
    print('x : $x');
    print('y : $y');
    print('z : $z');
    if(sum % 2 == 0){
    	print('짝수입니다.');
    } else {
    	print('홀수입니다.');
    }
    return sum; // result 반환값 필요
}
```
```
x : 10
y : 20
z : 70
짝수입니다.
x : 30
y : 10
z : 50
짝수입니다.
result1 : 100
result2 : 90
sum : 190
```
화살표 함수(arrow function)
```dart
void main() {
	int result1 = addNumbers(x: 10, y: 20);
    int result2 = addNumbers(y: 10, x: 30, z: 50);
    print('result1 : $result1');
    print('result2 : $result2');
    print('sum : ${result1 + result2}');
}
// 세개의 숫자 (x, y, z)를 더하고 짝수인지 홀수인지 알려주는 함수
int addNumbers({
	required int x,
    required int y,
    int z = 70,
}) => x + y + z; // 바로 다음에 오는 값이 반환 값
```
```
result1 : 100
result2 : 90
sum : 190
```
typedef
```dart
void main() {
	Operation operation = add;
    int result1 = operation(10, 20, 30);
    print(result1);
    
    operation = subtract;
    int result2 = operation(20, 30, 40);
    print(result2);
    
    int result3 = calculate(30, 40, 50, add);
    print(result3);
    int result4 = calculate(40, 50, 60, subtract);
    print(result4);
}
// signature
typedef Operation = int Function(int x, int y, int z);

int add(int x, int y, int z) => x + y + z;

int subtract(int x, int y, int z) => x - y - z;

int calculate(int x, int y, int z, Operation operation){
	return operation(x, y, z);
}
```
```
60
-50
120
-70
```